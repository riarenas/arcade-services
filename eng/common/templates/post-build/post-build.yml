parameters:
 # Which publishing infra should be used. THIS SHOULD MATCH THE VERSION ON THE BUILD MANIFEST.
  # Publishing V2 accepts optionally outlining the publishing stages - default is inline.
  # Publishing V3 DOES NOT accept inlining the publishing stages.
  publishingInfraVersion: 2
  # When set to true the publishing templates from the repo will be used
  # otherwise Darc add-build-to-channel will be used to trigger the promotion pipeline
  inline: true

  # Only used if inline==false. When set to true will stall the current build until
  # the Promotion Pipeline build finishes. Otherwise, the current build will continue 
  # execution concurrently with the promotion build.
  waitPublishingFinish: true

  BARBuildId: ''
  PromoteToChannelIds: ''

  enableSourceLinkValidation: false
  enableSigningValidation: true
  enableSymbolValidation: false
  enableNugetValidation: true
  publishInstallersAndChecksums: true
  SDLValidationParameters:
    enable: false
    continueOnError: false
    params: ''
    artifactNames: ''
    downloadArtifacts: true

  # These parameters let the user customize the call to sdk-task.ps1 for publishing
  # symbols & general artifacts as well as for signing validation
  symbolPublishingAdditionalParameters: ''
  artifactsPublishingAdditionalParameters: ''
  signingValidationAdditionalParameters: ''

  # Which stages should finish execution before post-build stages start
  validateDependsOn:
  - build
  publishDependsOn: 
  - Validate

  # Channel ID's instantiated in this file.
  # When adding a new channel implementation the call to `check-channel-consistency.ps1` 
  # needs to be updated with the new channel ID
  GeneralTestingChannelId: 529
  NetEngServicesIntChannelId: 678
  NetEngServicesProdChannelId: 679

stages:
- ${{ if or(and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')), eq( parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
  - stage: Validate
    dependsOn: ${{ parameters.validateDependsOn }}
    displayName: Validate Build Assets
    variables:
      - template: common-variables.yml
    jobs:
    - template: setup-maestro-vars.yml
      parameters:
        BARBuildId: ${{ parameters.BARBuildId }}
        PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}

    - ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
      - job:
        displayName: Post-build Checks
        dependsOn: setupMaestroVars
        variables:
          - name: TargetChannels
            value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.TargetChannels'] ]
        pool:
          vmImage: 'windows-2019'
        steps:
          - task: PowerShell@2
            displayName: Maestro Channels Consistency
            inputs:
              filePath: $(Build.SourcesDirectory)/eng/common/post-build/check-channel-consistency.ps1
              arguments: -PromoteToChannels "$(TargetChannels)"
                -AvailableChannelIds ${{parameters.NetEngLatestChannelId}},${{parameters.NetEngValidationChannelId}},${{parameters.NetDev5ChannelId}},${{parameters.NetDev6ChannelId}},${{parameters.GeneralTestingChannelId}},${{parameters.NETCoreToolingDevChannelId}},${{parameters.NETCoreToolingReleaseChannelId}},${{parameters.NETInternalToolingChannelId}},${{parameters.NETCoreExperimentalChannelId}},${{parameters.NetEngServicesIntChannelId}},${{parameters.NetEngServicesProdChannelId}},${{parameters.NetCoreSDK313xxChannelId}},${{parameters.NetCoreSDK313xxInternalChannelId}},${{parameters.NetCoreSDK314xxChannelId}},${{parameters.NetCoreSDK314xxInternalChannelId}},${{parameters.VS166ChannelId}},${{parameters.VS167ChannelId}},${{parameters.VS168ChannelId}},${{parameters.VSMasterChannelId}},${{parameters.VS169ChannelId}},${{parameters.VS1610ChannelId}}

    - job:
      displayName: NuGet Validation
      dependsOn: setupMaestroVars
      condition: eq( ${{ parameters.enableNugetValidation }}, 'true')
      pool:
        vmImage: 'windows-2019'
      variables:
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Package Artifacts
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            artifactName: PackageArtifacts
            checkDownloadedFiles: true

        - task: PowerShell@2
          displayName: Validate
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/nuget-validation.ps1
            arguments: -PackagesPath $(Build.ArtifactStagingDirectory)/PackageArtifacts/ 
              -ToolDestinationPath $(Agent.BuildDirectory)/Extract/ 

    - job:
      displayName: Signing Validation
      dependsOn: setupMaestroVars
      condition: and( eq( ${{ parameters.enableSigningValidation }}, 'true'), ne( variables['PostBuildSign'], 'true'))
      variables:
        - template: common-variables.yml
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Package Artifacts
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            artifactName: PackageArtifacts
            checkDownloadedFiles: true
            itemPattern: |
              **
              !**/Microsoft.SourceBuild.Intermediate.*.nupkg

        # This is necessary whenever we want to publish/restore to an AzDO private feed
        # Since sdk-task.ps1 tries to restore packages we need to do this authentication here
        # otherwise it'll complain about accessing a private feed.
        - task: NuGetAuthenticate@0
          displayName: 'Authenticate to AzDO Feeds'

        - task: PowerShell@2
          displayName: Enable cross-org publishing
          inputs:
            filePath: eng\common\enable-cross-org-publishing.ps1
            arguments: -token $(dn-bot-dnceng-artifact-feeds-rw)

        # Signing validation will optionally work with the buildmanifest file which is downloaded from
        # Azure DevOps above.
        - task: PowerShell@2
          displayName: Validate
          inputs:
            filePath: eng\common\sdk-task.ps1
            arguments: -task SigningValidation -restore -msbuildEngine vs
              /p:PackageBasePath='$(Build.ArtifactStagingDirectory)/PackageArtifacts'
              /p:SignCheckExclusionsFile='$(Build.SourcesDirectory)/eng/SignCheckExclusionsFile.txt'
              ${{ parameters.signingValidationAdditionalParameters }}

        - template: ../steps/publish-logs.yml
          parameters:
            StageLabel: 'Validation'
            JobLabel: 'Signing'

    - job:
      displayName: SourceLink Validation
      dependsOn: setupMaestroVars
      condition: eq( ${{ parameters.enableSourceLinkValidation }}, 'true')
      variables:
        - template: common-variables.yml
        - name: AzDOProjectName
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOProjectName'] ]
        - name: AzDOPipelineId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOPipelineId'] ]
        - name: AzDOBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.AzDOBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: DownloadBuildArtifacts@0
          displayName: Download Blob Artifacts
          inputs:
            buildType: specific
            buildVersionToDownload: specific
            project: $(AzDOProjectName)
            pipeline: $(AzDOPipelineId)
            buildId: $(AzDOBuildId)
            artifactName: BlobArtifacts
            checkDownloadedFiles: true

        - task: PowerShell@2
          displayName: Validate
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/sourcelink-validation.ps1
            arguments: -InputPath $(Build.ArtifactStagingDirectory)/BlobArtifacts/ 
              -ExtractPath $(Agent.BuildDirectory)/Extract/ 
              -GHRepoName $(Build.Repository.Name) 
              -GHCommit $(Build.SourceVersion)
              -SourcelinkCliVersion $(SourceLinkCLIVersion)
          continueOnError: true

    - template: /eng/common/templates/job/execute-sdl.yml
      parameters:
        enable: ${{ parameters.SDLValidationParameters.enable }}
        dependsOn: setupMaestroVars
        additionalParameters: ${{ parameters.SDLValidationParameters.params }}
        continueOnError: ${{ parameters.SDLValidationParameters.continueOnError }}
        artifactNames: ${{ parameters.SDLValidationParameters.artifactNames }}
        downloadArtifacts: ${{ parameters.SDLValidationParameters.downloadArtifacts }}

- ${{ if or(ge(parameters.publishingInfraVersion, 3), eq(parameters.inline, 'false')) }}:
  - stage: publish_using_darc
    ${{ if or(eq(parameters.enableNugetValidation, 'true'), eq(parameters.enableSigningValidation, 'true'), eq(parameters.enableSourceLinkValidation, 'true'), eq(parameters.SDLValidationParameters.enable, 'true')) }}:
      dependsOn: ${{ parameters.publishDependsOn }}
    ${{ if and(ne(parameters.enableNugetValidation, 'true'), ne(parameters.enableSigningValidation, 'true'), ne(parameters.enableSourceLinkValidation, 'true'), ne(parameters.SDLValidationParameters.enable, 'true')) }}:
      dependsOn: ${{ parameters.validateDependsOn }}
    displayName: Publish using Darc
    variables:
      - template: common-variables.yml
    jobs:
    - template: setup-maestro-vars.yml
      parameters:
        BARBuildId: ${{ parameters.BARBuildId }}
        PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}

    - job:
      displayName: Publish Using Darc
      dependsOn: setupMaestroVars
      timeoutInMinutes: 120
      variables:
        - name: BARBuildId
          value: $[ dependencies.setupMaestroVars.outputs['setReleaseVars.BARBuildId'] ]
      pool:
        vmImage: 'windows-2019'
      steps:
        - task: PowerShell@2
          displayName: Publish Using Darc
          inputs:
            filePath: $(Build.SourcesDirectory)/eng/common/post-build/publish-using-darc.ps1
            arguments: -BuildId $(BARBuildId) 
              -PublishingInfraVersion ${{ parameters.PublishingInfraVersion }}
              -AzdoToken '$(publishing-dnceng-devdiv-code-r-build-re)'
              -MaestroToken '$(MaestroApiAccessToken)'
              -WaitPublishingFinish ${{ parameters.waitPublishingFinish }}
              -PublishInstallersAndChecksums ${{ parameters.publishInstallersAndChecksums }}
              -ArtifactsPublishingAdditionalParameters '${{ parameters.artifactsPublishingAdditionalParameters }}'
              -SymbolPublishingAdditionalParameters '${{ parameters.symbolPublishingAdditionalParameters }}'

- ${{ if and(le(parameters.publishingInfraVersion, 2), eq(parameters.inline, 'true')) }}:
  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
    parameters:
      BARBuildId: ${{ parameters.BARBuildId }}
      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
      dependsOn: ${{ parameters.publishDependsOn }}
      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
      stageName: 'General_Testing_Publish'
      channelName: 'General Testing'
      akaMSChannelName: 'generaltesting'
      channelId: ${{ parameters.GeneralTestingChannelId }}
      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing/nuget/v3/index.json'
      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing/nuget/v3/index.json'
      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/general-testing-symbols/nuget/v3/index.json'

  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
    parameters:
      BARBuildId: ${{ parameters.BARBuildId }}
      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
      dependsOn: ${{ parameters.publishDependsOn }}
      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
      stageName: 'Net_Eng_Services_Int_Publish'
      channelName: '.NET Eng Services - Int'
      channelId: ${{ parameters.NetEngServicesIntChannelId }}
      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'

  - template: \eng\common\templates\post-build\channels\generic-public-channel.yml
    parameters:
      BARBuildId: ${{ parameters.BARBuildId }}
      PromoteToChannelIds: ${{ parameters.PromoteToChannelIds }}    
      artifactsPublishingAdditionalParameters: ${{ parameters.artifactsPublishingAdditionalParameters }}
      dependsOn: ${{ parameters.publishDependsOn }}
      publishInstallersAndChecksums: ${{ parameters.publishInstallersAndChecksums }}
      symbolPublishingAdditionalParameters: ${{ parameters.symbolPublishingAdditionalParameters }}
      stageName: 'Net_Eng_Services_Prod_Publish'
      channelName: '.NET Eng Services - Prod'
      channelId: ${{ parameters.NetEngServicesProdChannelId }}
      transportFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
      shippingFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng/nuget/v3/index.json'
      symbolsFeed: 'https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-eng-symbols/nuget/v3/index.json'